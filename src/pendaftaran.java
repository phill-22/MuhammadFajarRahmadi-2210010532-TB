
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author ASUS ROG
 */
public class pendaftaran extends javax.swing.JFrame {
    private final Map<String, String> kelasMap = new HashMap<>(); // Map untuk menyimpan id_kelas dan nama_kelas
    private final Map<Integer, String> siswaMap = new HashMap<>();

    /**
     * Creates new form pendaftaran
     */
    public pendaftaran() {
        initComponents();
        tampil();
        loadJurusan();
        loadSiswaData();
        updateRincianHarga();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        carijTextField = new javax.swing.JTextField();
        Cari = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        tanggalDateChooser = new com.toedter.calendar.JDateChooser();
        jurusanComboBox = new javax.swing.JComboBox<>();
        kelasComboBox = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        pelajaranCheckBox = new javax.swing.JCheckBox();
        olgaCheckBox = new javax.swing.JCheckBox();
        batikCheckBox = new javax.swing.JCheckBox();
        Total = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        metodeComboBox = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        statusComboBox = new javax.swing.JComboBox<>();
        namaComboBox = new javax.swing.JComboBox<>();
        LBLTotal = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        rincianHargaTextArea = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        tambah = new javax.swing.JButton();
        ubah = new javax.swing.JButton();
        Hapus = new javax.swing.JButton();
        clear = new javax.swing.JButton();
        Kembali = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 153, 51));
        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.black, java.awt.Color.black, java.awt.Color.black, java.awt.Color.black));

        jLabel1.setText("Nama Siswa");

        jLabel5.setText("Tanggal Pendaftaran");

        carijTextField.setBackground(new java.awt.Color(255, 255, 255));
        carijTextField.setForeground(new java.awt.Color(0, 0, 0));
        carijTextField.setToolTipText("");
        carijTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                carijTextFieldActionPerformed(evt);
            }
        });

        Cari.setBackground(new java.awt.Color(255, 255, 255));
        Cari.setForeground(new java.awt.Color(0, 0, 0));
        Cari.setText("Cari");
        Cari.setToolTipText("");
        Cari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CariActionPerformed(evt);
            }
        });

        jTable2.setBackground(new java.awt.Color(255, 255, 255));
        jTable2.setForeground(new java.awt.Color(0, 0, 0));
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "null"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        jLabel7.setText("Cari :");

        jLabel3.setText("Jurusan");

        jLabel4.setText("Kelas");

        tanggalDateChooser.setBackground(new java.awt.Color(255, 255, 255));
        tanggalDateChooser.setForeground(new java.awt.Color(0, 0, 0));
        tanggalDateChooser.setToolTipText("");

        jurusanComboBox.setBackground(new java.awt.Color(255, 255, 255));
        jurusanComboBox.setForeground(new java.awt.Color(0, 0, 0));
        jurusanComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pilih Jurusan", "IPS", "IPA", "BAHASA" }));
        jurusanComboBox.setToolTipText("");
        jurusanComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jurusanComboBoxActionPerformed(evt);
            }
        });

        kelasComboBox.setBackground(new java.awt.Color(255, 255, 255));
        kelasComboBox.setForeground(new java.awt.Color(0, 0, 0));
        kelasComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pilih Kelas" }));
        kelasComboBox.setToolTipText("");
        kelasComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kelasComboBoxActionPerformed(evt);
            }
        });

        jLabel6.setText("Pilih Biaya Tambahan :");

        pelajaranCheckBox.setBackground(new java.awt.Color(255, 255, 255));
        pelajaranCheckBox.setForeground(new java.awt.Color(0, 0, 0));
        pelajaranCheckBox.setText("Buku Pelajaran");
        pelajaranCheckBox.setToolTipText("");
        pelajaranCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                pelajaranCheckBoxStateChanged(evt);
            }
        });

        olgaCheckBox.setBackground(new java.awt.Color(255, 255, 255));
        olgaCheckBox.setForeground(new java.awt.Color(0, 0, 0));
        olgaCheckBox.setText("Baju Olahraga");
        olgaCheckBox.setToolTipText("");
        olgaCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                olgaCheckBoxStateChanged(evt);
            }
        });

        batikCheckBox.setBackground(new java.awt.Color(255, 255, 255));
        batikCheckBox.setForeground(new java.awt.Color(0, 0, 0));
        batikCheckBox.setText("Baju Batik");
        batikCheckBox.setToolTipText("");
        batikCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                batikCheckBoxStateChanged(evt);
            }
        });

        Total.setText("Total");

        jLabel8.setText("Metode Bayar:");

        metodeComboBox.setBackground(new java.awt.Color(255, 255, 255));
        metodeComboBox.setForeground(new java.awt.Color(0, 0, 0));
        metodeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pilih Metode Pembayaran", "Cash", "Transfer", " " }));
        metodeComboBox.setToolTipText("");
        metodeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                metodeComboBoxActionPerformed(evt);
            }
        });

        jLabel9.setText("Status Pendaftaran");

        statusComboBox.setBackground(new java.awt.Color(255, 255, 255));
        statusComboBox.setForeground(new java.awt.Color(0, 0, 0));
        statusComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pilih status pembayaran", "lunas", "belum lunas", " ", " " }));
        statusComboBox.setToolTipText("");
        statusComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statusComboBoxActionPerformed(evt);
            }
        });

        namaComboBox.setBackground(new java.awt.Color(255, 255, 255));
        namaComboBox.setForeground(new java.awt.Color(0, 0, 0));
        namaComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pilih Nama Siswa" }));
        namaComboBox.setToolTipText("");
        namaComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                namaComboBoxActionPerformed(evt);
            }
        });

        LBLTotal.setText("Total");

        rincianHargaTextArea.setBackground(new java.awt.Color(255, 255, 255));
        rincianHargaTextArea.setColumns(20);
        rincianHargaTextArea.setForeground(new java.awt.Color(0, 0, 0));
        rincianHargaTextArea.setRows(5);
        rincianHargaTextArea.setToolTipText("");
        jScrollPane1.setViewportView(rincianHargaTextArea);

        jPanel3.setBackground(new java.awt.Color(0, 153, 153));
        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.black, java.awt.Color.black, java.awt.Color.black, java.awt.Color.black));

        tambah.setBackground(new java.awt.Color(255, 255, 255));
        tambah.setForeground(new java.awt.Color(0, 0, 0));
        tambah.setText("Tambah");
        tambah.setToolTipText("");
        tambah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tambahActionPerformed(evt);
            }
        });

        ubah.setBackground(new java.awt.Color(255, 255, 255));
        ubah.setForeground(new java.awt.Color(0, 0, 0));
        ubah.setText("Ubah");
        ubah.setToolTipText("");
        ubah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ubahActionPerformed(evt);
            }
        });

        Hapus.setBackground(new java.awt.Color(255, 255, 255));
        Hapus.setForeground(new java.awt.Color(0, 0, 0));
        Hapus.setText("Hapus");
        Hapus.setToolTipText("");
        Hapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HapusActionPerformed(evt);
            }
        });

        clear.setBackground(new java.awt.Color(255, 255, 255));
        clear.setForeground(new java.awt.Color(0, 0, 0));
        clear.setText("Clear");
        clear.setToolTipText("");
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });

        Kembali.setBackground(new java.awt.Color(255, 255, 255));
        Kembali.setForeground(new java.awt.Color(0, 0, 0));
        Kembali.setText("Kembali");
        Kembali.setToolTipText("");
        Kembali.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                KembaliActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(ubah, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Hapus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(clear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Kembali, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(tambah, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(tambah)
                .addGap(18, 18, 18)
                .addComponent(ubah)
                .addGap(18, 18, 18)
                .addComponent(Hapus)
                .addGap(18, 18, 18)
                .addComponent(clear)
                .addGap(18, 18, 18)
                .addComponent(Kembali)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 32, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel4)
                            .addComponent(pelajaranCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(batikCheckBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(olgaCheckBox, javax.swing.GroupLayout.Alignment.LEADING))
                            .addComponent(jLabel8)
                            .addComponent(jLabel9)
                            .addComponent(Total)))
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(metodeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(statusComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(kelasComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jurusanComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(tanggalDateChooser, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(namaComboBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(LBLTotal))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(18, 18, 18)
                                .addComponent(carijTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(39, 39, 39)
                                .addComponent(Cari))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 585, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(27, 27, 27))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1)
                                    .addComponent(namaComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(30, 30, 30)
                                .addComponent(jLabel5)
                                .addGap(33, 33, 33)
                                .addComponent(jLabel3)
                                .addGap(23, 23, 23)
                                .addComponent(jLabel4))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(44, 44, 44)
                                .addComponent(tanggalDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(25, 25, 25)
                                .addComponent(jurusanComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(13, 13, 13)
                                .addComponent(kelasComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(pelajaranCheckBox)
                                .addGap(18, 18, 18)
                                .addComponent(olgaCheckBox)
                                .addGap(18, 18, 18)
                                .addComponent(batikCheckBox)))
                        .addGap(60, 60, 60)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(metodeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel8))
                                .addGap(18, 18, 18)
                                .addComponent(statusComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Cari)
                            .addComponent(carijTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(Total)
                                .addComponent(LBLTotal))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)))))
                .addContainerGap(31, Short.MAX_VALUE))
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jPanel2.setBackground(new java.awt.Color(0, 153, 153));
        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.black, java.awt.Color.black, java.awt.Color.black, java.awt.Color.black));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel2.setText("SELAMAT DATANG DI PENDAFTARAN SISWA BARU");

        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel10.setText("SILAHKAN INPUT DATA SISWA BARU");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel10))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel10)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void namaComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_namaComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_namaComboBoxActionPerformed

    private void statusComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statusComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_statusComboBoxActionPerformed

    private void metodeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_metodeComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_metodeComboBoxActionPerformed

    private void kelasComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kelasComboBoxActionPerformed
        String selectedNamaKelas = (String) kelasComboBox.getSelectedItem();
        String idKelas = kelasMap.get(selectedNamaKelas); // Ambil id_kelas berdasarkan nama_kelas
        if (idKelas != null) {
            System.out.println("ID Kelas yang dipilih : "+idKelas);

        }else{
            System.out.println("Belum ada Kelas Yang dipilih");
        }
    }//GEN-LAST:event_kelasComboBoxActionPerformed

    private void jurusanComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jurusanComboBoxActionPerformed
        // TODO add your handling code here:
        String selectedJurusan = (String) jurusanComboBox.getSelectedItem();
        loadKelasByJurusan(selectedJurusan);

    }//GEN-LAST:event_jurusanComboBoxActionPerformed

    private void KembaliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_KembaliActionPerformed
        // TODO add your handling code here:
        new MainMenu().setVisible(true);

        this.dispose();
    }//GEN-LAST:event_KembaliActionPerformed

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed

        clearInputs();
    }//GEN-LAST:event_clearActionPerformed

    private void HapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HapusActionPerformed
        // TODO add your handling code here:
           try {
        // Validasi inputan
        if (namaComboBox.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(this, "Pilih Nama Siswa yang akan dihapus!", "Peringatan", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Ambil data dari inputan
        String namaSiswa = (String) namaComboBox.getSelectedItem();
        int idSiswa = getIdSiswaByName(namaSiswa);

        // Konfirmasi penghapusan
        int confirm = JOptionPane.showConfirmDialog(this, 
            "Apakah Anda yakin ingin menghapus data untuk siswa: " + namaSiswa + "?", 
            "Konfirmasi", JOptionPane.YES_NO_OPTION);
        if (confirm != JOptionPane.YES_OPTION) {
            return;
        }

        // Hapus data dari database
        String sql = "DELETE FROM pendaftaran WHERE id_siswa = ?";
        java.sql.Connection conn = koneksi.koneksiDB();
        java.sql.PreparedStatement pst = conn.prepareStatement(sql);
        pst.setInt(1, idSiswa);

        int rowsDeleted = pst.executeUpdate();
        if (rowsDeleted > 0) {
            JOptionPane.showMessageDialog(this, "Data berhasil dihapus!");
            tampil(); // Refresh tabel
            clearInputs(); // Kosongkan inputan
        } else {
            JOptionPane.showMessageDialog(this, "Data tidak ditemukan atau sudah dihapus.", "Informasi", JOptionPane.INFORMATION_MESSAGE);
        }

    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Gagal menghapus data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }
        
    }//GEN-LAST:event_HapusActionPerformed

    private void ubahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ubahActionPerformed
        // TODO add your handling code here:
         try {
        // Validasi inputan
        if (namaComboBox.getSelectedIndex() == 0 || kelasComboBox.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(this, "Pilih Nama Siswa dan Kelas!", "Peringatan", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Ambil data dari inputan form
        String namaSiswa = (String) namaComboBox.getSelectedItem();
        String namaKelas = (String) kelasComboBox.getSelectedItem();
        String jurusan = (String) jurusanComboBox.getSelectedItem();
        boolean beliOlga = olgaCheckBox.isSelected();
        boolean beliBatik = batikCheckBox.isSelected();
        boolean beliPelajaran = pelajaranCheckBox.isSelected();
        double totalBiaya = Double.parseDouble(LBLTotal.getText().replace("Rp", "").trim());
        String metodePembayaran = (String) metodeComboBox.getSelectedItem();
        String statusPendaftaran = (String) statusComboBox.getSelectedItem();

        // Ambil ID siswa dan ID kelas
        int idSiswa = getIdSiswaByName(namaSiswa);
        int idKelas = getIdkelasByName(namaKelas);

        // Update data di database
        String sql = "UPDATE pendaftaran SET id_kelas = ?,jurusan = ?, beli_baju_olahraga = ?, beli_baju_batik = ?, beli_buku_pelajaran = ?, total_biaya = ?, metode_pembayaran = ?, status_pendaftaran = ? WHERE id_siswa = ?" ;

        java.sql.Connection conn = koneksi.koneksiDB();
        java.sql.PreparedStatement pst = conn.prepareStatement(sql);
        pst.setInt(1, idKelas);
        pst.setString(2, jurusan);
        pst.setBoolean(3, beliOlga);
        pst.setBoolean(4, beliBatik);
        pst.setBoolean(5, beliPelajaran);
        pst.setDouble(6, totalBiaya);
        pst.setString(7, metodePembayaran);
        pst.setString(8, statusPendaftaran);
        pst.setInt(9, idSiswa);

        int rowsUpdated = pst.executeUpdate();
        if (rowsUpdated > 0) {
            JOptionPane.showMessageDialog(this, "Data berhasil diubah!");
            tampil(); // Refresh tabel jika diperlukan
        } else {
            JOptionPane.showMessageDialog(this, "Data tidak ditemukan atau tidak ada perubahan.", "Informasi", JOptionPane.INFORMATION_MESSAGE);
        }

    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Gagal mengubah data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }
    }//GEN-LAST:event_ubahActionPerformed

    private void tambahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tambahActionPerformed
        // TODO add your handling code here:
        try {
        // Ambil nama siswa yang dipilih dari ComboBox
        String namaSiswa = (String) namaComboBox.getSelectedItem();
        int idSiswa = getIdSiswaByName(namaSiswa);

        // Ambil nama kelas yang dipilih
        String namaKelas = (String) kelasComboBox.getSelectedItem();
        int idKelas = getIdkelasByName(namaKelas);

        // Hitung ulang total biaya (opsional jika sudah dihitung sebelumnya)
        totalBiaya = 0.0;
        if (olgaCheckBox.isSelected()) totalBiaya += HARGA_BAJU_OLAHRAGA;
        if (batikCheckBox.isSelected()) totalBiaya += HARGA_BAJU_BATIK;
        if (pelajaranCheckBox.isSelected()) totalBiaya += HARGA_BUKU_PELAJARAN;

        // Siapkan query untuk menyimpan data ke database
        String sql = """
            INSERT INTO pendaftaran (id_siswa, id_kelas, tanggal_pendaftaran, total_biaya, metode_pembayaran,
                                      status_pendaftaran, beli_baju_olahraga, beli_baju_batik, beli_buku_pelajaran, jurusan)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        """;

        java.sql.Connection conn = (java.sql.Connection) koneksi.koneksiDB();
        java.sql.PreparedStatement pst = conn.prepareStatement(sql);
        pst.setInt(1, idSiswa); // ID siswa
        pst.setInt(2, idKelas); // ID kelas
        pst.setDate(3, new java.sql.Date(tanggalDateChooser.getDate().getTime())); // Tanggal pendaftaran
        pst.setDouble(4, totalBiaya); // Total biaya
        pst.setString(5, (String) metodeComboBox.getSelectedItem()); // Metode pembayaran
        pst.setString(6, (String) statusComboBox.getSelectedItem()); // Status pendaftaran
        pst.setBoolean(7, olgaCheckBox.isSelected()); // Beli baju olahraga
        pst.setBoolean(8, batikCheckBox.isSelected()); // Beli baju batik
        pst.setBoolean(9, pelajaranCheckBox.isSelected()); // Beli buku pelajaran
        pst.setString(10, (String) jurusanComboBox.getSelectedItem()); // Jurusan

        pst.executeUpdate(); // Eksekusi query
        JOptionPane.showMessageDialog(this, "Data berhasil disimpan!");

        // Perbarui tabel di GUI
        tampil();
        clearInputs();

    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Gagal menyimpan data: " + e.getMessage());
        e.printStackTrace();
    }

    }//GEN-LAST:event_tambahActionPerformed

    private void CariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CariActionPerformed
        // TODO add your handling code here:
        try {
        String keyword = carijTextField.getText(); // Ambil teks pencarian
        if (keyword.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Masukkan kata kunci untuk mencari!", "Peringatan", JOptionPane.WARNING_MESSAGE);
            return;
        }

        String sql = """
            SELECT siswa.id_siswa, siswa.nama AS nama_siswa, pendaftaran.tanggal_pendaftaran, pendaftaran.jurusan, 
                   kelas.nama_kelas, kelas.id_kelas, pendaftaran.beli_baju_olahraga, pendaftaran.beli_baju_batik, 
                   pendaftaran.beli_buku_pelajaran, pendaftaran.total_biaya, pendaftaran.metode_pembayaran, 
                   pendaftaran.status_pendaftaran
            FROM pendaftaran
            INNER JOIN siswa ON pendaftaran.id_siswa = siswa.id_siswa
            INNER JOIN kelas ON pendaftaran.id_kelas = kelas.id_kelas
            WHERE siswa.nama LIKE ? OR kelas.nama_kelas LIKE ? OR pendaftaran.status_pendaftaran LIKE ?
            LIMIT 1
        """;

        java.sql.Connection conn = koneksi.koneksiDB();
        java.sql.PreparedStatement pst = conn.prepareStatement(sql);
        String wildcardKeyword = "%" + keyword + "%";
        pst.setString(1, wildcardKeyword); // Cari di Nama Siswa
        pst.setString(2, wildcardKeyword); // Cari di Nama Kelas
        pst.setString(3, wildcardKeyword); // Cari di Status Pembayaran

        ResultSet rs = pst.executeQuery();
        


        if (rs.next()) {
    // Isi inputan dengan data hasil pencarian
    namaComboBox.setSelectedItem(rs.getString("nama_siswa").trim());
    tanggalDateChooser.setDate(rs.getDate("tanggal_pendaftaran"));
    jurusanComboBox.setSelectedItem(rs.getString("jurusan").trim());
    kelasComboBox.setSelectedItem(rs.getString("nama_kelas").trim());
    olgaCheckBox.setSelected(rs.getBoolean("beli_baju_olahraga"));
    batikCheckBox.setSelected(rs.getBoolean("beli_baju_batik"));
    pelajaranCheckBox.setSelected(rs.getBoolean("beli_buku_pelajaran"));
    LBLTotal.setText("Rp" + String.format("%.0f", rs.getDouble("total_biaya")));
    String metode = rs.getString("metode_pembayaran");
    String status = rs.getString("status_pendaftaran");

          
         if ("Cash".equalsIgnoreCase(metode)) {
            metodeComboBox.setSelectedIndex(1);
        } else if ("Transfer".equalsIgnoreCase(metode)) {
            metodeComboBox.setSelectedIndex(2);
        } else {
            metodeComboBox.setSelectedIndex(0); // Default: Tidak valid
        }
         
         if ("lunas".equalsIgnoreCase(status)) {
            statusComboBox.setSelectedIndex(1);
        } else if ("belum lunas".equalsIgnoreCase(metode)) {
            statusComboBox.setSelectedIndex(2);
        } else {
            metodeComboBox.setSelectedIndex(0); // Default: Tidak valid
        }


    JOptionPane.showMessageDialog(this, "Data ditemukan dan diisi ke inputan!", "Informasi", JOptionPane.INFORMATION_MESSAGE);
} else {
    JOptionPane.showMessageDialog(this, "Tidak ada data yang cocok dengan kata kunci: " + keyword, "Informasi", JOptionPane.INFORMATION_MESSAGE);
}

    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Gagal mencari data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
            
    }//GEN-LAST:event_CariActionPerformed

    private void carijTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_carijTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_carijTextFieldActionPerformed

    private void olgaCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_olgaCheckBoxStateChanged
        // TODO add your handling code here:
          updateRincianHarga();
        
    }//GEN-LAST:event_olgaCheckBoxStateChanged

    private void pelajaranCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_pelajaranCheckBoxStateChanged
        // TODO add your handling code here:
        updateRincianHarga();
    }//GEN-LAST:event_pelajaranCheckBoxStateChanged

    private void batikCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_batikCheckBoxStateChanged
        // TODO add your handling code here:
        updateRincianHarga();
    }//GEN-LAST:event_batikCheckBoxStateChanged

    
        private final double HARGA_BAJU_OLAHRAGA = 150000.00;
        private final double HARGA_BAJU_BATIK = 100000.00;
        private final double HARGA_BUKU_PELAJARAN = 75000.00;

        private double totalBiaya = 0.0; // Variabel untuk menyimpan 

private void clearInputs() {
    namaComboBox.setSelectedIndex(0); // Reset ComboBox Nama Siswa
    tanggalDateChooser.setDate(null); // Reset tanggal
    jurusanComboBox.setSelectedIndex(0); // Reset ComboBox Jurusan
    kelasComboBox.setSelectedIndex(0); // Reset ComboBox Kelas
    olgaCheckBox.setSelected(false); // Uncheck Checkbox Olahraga
    batikCheckBox.setSelected(false); // Uncheck Checkbox Batik
    pelajaranCheckBox.setSelected(false); // Uncheck Checkbox Pelajaran
    LBLTotal.setText("Rp0"); // Reset Total Biaya
    metodeComboBox.setSelectedIndex(0); // Reset ComboBox Metode Pembayaran
    statusComboBox.setSelectedIndex(0); // Reset ComboBox Status Pembayaran
}        

        
public void tampil() {
    try {
        DefaultTableModel tabel = new DefaultTableModel();
        tabel.addColumn("Nama Siswa");
        tabel.addColumn("Tanggal Pendaftaran");
        tabel.addColumn("Jurusan");
        tabel.addColumn("Kelas");
        tabel.addColumn("Baju Olahraga");
        tabel.addColumn("Baju Batik");
        tabel.addColumn("Buku Pelajaran");
        tabel.addColumn("Total Biaya");
        tabel.addColumn("Metode Pembayaran");
        tabel.addColumn("Status Pembayaran");

        java.sql.Connection conn = (java.sql.Connection) koneksi.koneksiDB();
        String sql = """
            SELECT siswa.nama AS nama_siswa, pendaftaran.tanggal_pendaftaran, pendaftaran.jurusan, 
                   kelas.nama_kelas, pendaftaran.beli_baju_olahraga, pendaftaran.beli_baju_batik, 
                   pendaftaran.beli_buku_pelajaran, pendaftaran.total_biaya, pendaftaran.metode_pembayaran, 
                   pendaftaran.status_pendaftaran
            FROM pendaftaran
            INNER JOIN siswa ON pendaftaran.id_siswa = siswa.id_siswa
            INNER JOIN kelas ON pendaftaran.id_kelas = kelas.id_kelas
        """;
        java.sql.PreparedStatement pst = conn.prepareStatement(sql);
        ResultSet rs = pst.executeQuery();

        while (rs.next()) {
            tabel.addRow(new Object[]{
                rs.getString("nama_siswa"),
                rs.getString("tanggal_pendaftaran"),
                rs.getString("jurusan"),
                rs.getString("nama_kelas"),
                rs.getBoolean("beli_baju_olahraga") ? "Iya" : "Tidak", // Konversi ke Iya/Tidak
                rs.getBoolean("beli_baju_batik") ? "Iya" : "Tidak",     // Konversi ke Iya/Tidak
                rs.getBoolean("beli_buku_pelajaran") ? "Iya" : "Tidak",// Konversi ke Iya/Tidak
                rs.getDouble("total_biaya"),
                rs.getString("metode_pembayaran"),
                rs.getString("status_pendaftaran")
            });
        }
        jTable2.setModel(tabel);
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Gagal memuat data: " + e.getMessage());
        e.printStackTrace();
    }
}


private int getIdSiswaByName(String nama) throws SQLException {
    // Periksa apakah nama valid
    if (nama == null || nama.equals("Pilih Nama Siswa")) {
        throw new SQLException("Nama siswa belum dipilih.");
    }

    // Cari id_siswa dari Map
    for (Map.Entry<Integer, String> entry : siswaMap.entrySet()) {
        if (entry.getValue().equals(nama)) {
            return entry.getKey(); // Return id_siswa
        }
    }
    throw new SQLException("Siswa dengan nama " + nama + " tidak ditemukan.");
}



public void loadSiswaData() {
    try {
        siswaMap.clear(); // Bersihkan Map sebelum memuat ulang data
        namaComboBox.removeAllItems(); // Reset ComboBox
        namaComboBox.addItem("Pilih Nama Siswa"); // Tambahkan opsi default

        java.sql.Connection conn = (java.sql.Connection) koneksi.koneksiDB();
        String sql = "SELECT id_siswa, nama FROM siswa"; // Query untuk mendapatkan id_siswa dan nama
        java.sql.PreparedStatement pst = conn.prepareStatement(sql);
        ResultSet rs = pst.executeQuery();

        System.out.println("Data Siswa yang Dimuat:"); // Log header
        while (rs.next()) {
            int idSiswa = rs.getInt("id_siswa");
            String namaSiswa = rs.getString("nama");

            siswaMap.put(idSiswa, namaSiswa); // Tambahkan data ke Map
            namaComboBox.addItem(namaSiswa); // Tambahkan nama ke ComboBox

            // Log data siswa
            System.out.println("ID Siswa: " + idSiswa + ", Nama: " + namaSiswa);
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Gagal memuat data siswa: " + e.getMessage());
        e.printStackTrace();
    }
}



        private void hitungTotalBiaya() {
            totalBiaya = 0.0;
            if (olgaCheckBox.isSelected()) totalBiaya += HARGA_BAJU_OLAHRAGA;
            if (batikCheckBox.isSelected()) totalBiaya += HARGA_BAJU_BATIK;
            if (pelajaranCheckBox.isSelected()) totalBiaya += HARGA_BUKU_PELAJARAN;
            LBLTotal.setText("Rp" + String.format("%.0f", totalBiaya));
        }



        
     private void loadKelasByJurusan(String jurusan) {
        kelasComboBox.removeAllItems(); // Reset ComboBox kelas
        kelasComboBox.addItem("Pilih Kelas"); // Tambahkan opsi default
        kelasMap.clear(); // Reset Map

        if (jurusan != null && !jurusan.equals("Pilih Jurusan")) {
            try {
                 java.sql.Connection conn = (java.sql.Connection) koneksi.koneksiDB();// Koneksi ke database
                String sql = "SELECT id_kelas, nama_kelas FROM kelas WHERE jurusan = ?"; // Query
                java.sql.PreparedStatement pst = conn.prepareStatement(sql);
                pst.setString(1, jurusan);

                ResultSet rs = pst.executeQuery();

                while (rs.next()) {
                    String idKelas = rs.getString("id_kelas");
                    String namaKelas = rs.getString("nama_kelas");

                    kelasComboBox.addItem(namaKelas); // Tambahkan nama_kelas ke ComboBox
                    kelasMap.put(namaKelas, idKelas); // Simpan id_kelas dengan nama_kelas sebagai kunci
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Gagal memuat kelas: " + e.getMessage());
            }
        }
    }

        
       private void loadJurusan() {
        jurusanComboBox.removeAllItems(); // Reset ComboBox
        jurusanComboBox.addItem("Pilih Jurusan"); // Tambahkan opsi default

        try {
         java.sql.Connection conn = (java.sql.Connection) koneksi.koneksiDB(); // Koneksi ke database
            String sql = "SELECT DISTINCT jurusan FROM kelas"; // Query untuk mendapatkan jurusan unik
            java.sql.PreparedStatement pst = conn.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();

            while (rs.next()) {
                jurusanComboBox.addItem(rs.getString("jurusan")); // Tambahkan jurusan ke ComboBox
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Gagal memuat jurusan: " + e.getMessage());
        }
    }
       
       private int getIdkelasByName(String nama_kelas) throws SQLException{
            java.sql.Connection conn=(java.sql.Connection) koneksi.koneksiDB();
            String sql = "SELECT id_kelas FROM kelas WHERE nama_kelas = ?";
            java.sql.PreparedStatement pst= conn.prepareStatement(sql);
            pst.setString(1, nama_kelas);
            ResultSet rs = pst.executeQuery();
            if (rs.next()) {
                return rs.getInt("id_kelas");
            } else {
                throw new SQLException("Kelas dengan nama " + nama_kelas + " tidak ditemukan");
            }
         }
       
       private void updateRincianHarga() {
    StringBuilder rincian = new StringBuilder();
    double totalBiaya = 0.0;

    // Tambahkan rincian biaya untuk checkbox yang dicentang
    if (olgaCheckBox.isSelected()) {
        rincian.append("Baju Olahraga: Rp").append(String.format("%.0f", HARGA_BAJU_OLAHRAGA)).append("\n");
        totalBiaya += HARGA_BAJU_OLAHRAGA;
    }
    if (batikCheckBox.isSelected()) {
        rincian.append("Baju Batik: Rp").append(String.format("%.0f", HARGA_BAJU_BATIK)).append("\n");
        totalBiaya += HARGA_BAJU_BATIK;
    }
    if (pelajaranCheckBox.isSelected()) {
        rincian.append("Buku Pelajaran: Rp").append(String.format("%.0f", HARGA_BUKU_PELAJARAN)).append("\n");
        totalBiaya += HARGA_BUKU_PELAJARAN;
    }


    // Tampilkan rincian di JTextArea
    rincianHargaTextArea.setText(rincian.toString());

    // Perbarui total di LBLTotal (jika ada)
    LBLTotal.setText("Rp" + String.format("%.0f", totalBiaya));
}



        

           
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(pendaftaran.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(pendaftaran.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(pendaftaran.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(pendaftaran.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new pendaftaran().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Cari;
    private javax.swing.JButton Hapus;
    private javax.swing.JButton Kembali;
    private javax.swing.JLabel LBLTotal;
    private javax.swing.JLabel Total;
    private javax.swing.JCheckBox batikCheckBox;
    private javax.swing.JTextField carijTextField;
    private javax.swing.JButton clear;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable2;
    private javax.swing.JComboBox<String> jurusanComboBox;
    private javax.swing.JComboBox<String> kelasComboBox;
    private javax.swing.JComboBox<String> metodeComboBox;
    private javax.swing.JComboBox<String> namaComboBox;
    private javax.swing.JCheckBox olgaCheckBox;
    private javax.swing.JCheckBox pelajaranCheckBox;
    private javax.swing.JTextArea rincianHargaTextArea;
    private javax.swing.JComboBox<String> statusComboBox;
    private javax.swing.JButton tambah;
    private com.toedter.calendar.JDateChooser tanggalDateChooser;
    private javax.swing.JButton ubah;
    // End of variables declaration//GEN-END:variables
}
